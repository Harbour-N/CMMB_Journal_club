---
title: Fate mapping of human glioblastoma reveals an invariant stem cell hierarchy
description: Go over the supplementary material from the paper and recreate some of the simulations
author: 
  - name: Nicholas Harbour
format: 
  html:
    embed-resources: true
    code-fold: true
    number-sections: true
    toc: true
    toc-depth: 3
    date-modified: last-modified
    date-format: "MMMM DD, YYYY, HH:mm:ss"
jupyter: python3
---

```{python}
# Load libraries
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
import scipy.special as special
from scipy.interpolate import interp1d
import pandas as pd
from numba import jit
```


Find paper here: [Fate mapping of human glioblastoma reveals an invariant stem cell hierarchy](https://www.nature.com/articles/nature23666)

# Statistical properties of lentiviral barcoding

Lentiviral barcoding relies on the random infection of cells. While it entails the possibility to uniquely identify clone lineages the randomness of the barcoding procedure may lead to the same cell acquiring multiple barcodes or to the same barcode being present in more than one cell. Since this can affect the statistical properties of the derived barcode frequency distributions, we here give an estimate for the relative amount of multiply labelled cells and barcodes present in multiple cells.

For a library consisting of $N_B$ unique barcodes, with a barcoding event occurring with probability $p_B$, the number $n_B$ of barcodes acquired by a single cell follows the binomial distribution: $Q(n_B) = \binom{N_B}{n_B} p_B^{n_B} (1-p_B)^{N_B-n_B}$ (This is the probability mass function).


In probability theory and statistics, the [binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution) with parameters n and p is the discrete probability distribution of the number of successes in a sequence of n independent experiments, each asking a yes-no question, and each with its own Boolean-valued outcome: success (with probability p) or failure (with probability q = 1 - p). 
 

In the paper [Fate mapping of human glioblastoma reveals an invariant stem cell hierarchy](https://www.nature.com/articles/nature23666) they reference this [Clonal Analysis via Barcoding Reveals Diverse Growth and Differentiation of Transplanted Mouse and Human Mammary Stem Cells](https://www.cell.com/cell-stem-cell/fulltext/S1934-5909(13)00560-2?large_figure=true) Which mentions $2 \times 10^5$ unique barcodes (and this number os also given in the paper).

```{python}

# lets say that we have a library of 10^5 barcodes
N_B = 2*10**5 # 
# We have a probability of a cell being infected
p_B = 0.000001 

# We can calculate the probability of a cell being infected with 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 barcodes
n_B = np.arange(0, 10,1)

Q = stats.binom.pmf(n_B, N_B, p_B)

# display the probability mass functiom
fig, ax = plt.subplots(1, 1)
ax.plot(n_B, Q, 'bo', ms=8, label='binom pmf')
ax.vlines(n_B, 0, Q, colors='b', lw=5, alpha=0.5)
ax.set_title(f'Probability mass function. \n Number unique barcodes: {N_B}, probability of infection: {p_B}')
ax.set_xlabel('Number of barcodes')
ax.set_ylabel('Probability')
plt.show()

```

For large $N_B$ the distribution Q can be approximated by a Poisson distribution:

$$
Q(n_B) \approx \frac{e^{-N_B p_B} (N_B p_B)^{n_B}}{n_B!}
$$

```{python}

# Compare the binomial distribution with the poisson distribution
Q_poisson = stats.poisson.pmf(n_B, N_B*p_B)

fig, ax = plt.subplots(1, 1)
ax.plot(n_B, Q, 'bo', ms=8, label='binom pmf')
ax.plot(n_B, Q_poisson, 'r--', label='poisson pmf')
ax.vlines(n_B, 0, Q, colors='b', lw=5, alpha=0.5)
ax.set_title(f'Probability mass function. \n Number unique barcodes: {N_B}, probability of infection: {p_B}')
ax.set_xlabel('Number of barcodes')
ax.set_ylabel('Probability')
ax.legend()
plt.show()

```

The relative amount of unlabelled cells, $Q_0 = Q(0)$, the relative amount of cells labelled with 1 barcode is $Q_1 = Q(1)$ and the relative amount of cells labelled with more than 1 barcode s $Q_{>1} = \sum_{n_B > 1} Q(n_B)$. and are obtained as

$$
    Q_0 = e^{-N_B p_B}, \quad Q_1 = N_B p_B e^{-N_B p_B}, \quad Q_{>1} = 1 - Q_0 - Q_1 = 1 - (1 + N_B p_B) e^{-N_B p_B}
$$

The parameter $\nu = N_B p_B$  characterises the distribution of barcodes and can be obtained from the labelling efficiency $\eta$, which denotes the relative amount of cells that bear at least 1 barcode, by requiring $1 - Q_0 = \eta$, this gives

$$
    \nu = -ln(1 - \eta)
$$

Conversly we can ask how likely is it that the same barcode appears in multiple cells. Out of a total of $N_C$ cells prepared for barcoding, the number $n_C$ of cells acquiring the same barcode is distirubted according to $R(n_C) = P_{Binomial}(n_C | N_C, p_B)$. Again for large number of cells $N_C$ the distribution can be approximated by a Poisson distribution:

$$
    R(n_C) \approx \frac{e^{-N_C p_B} (N_C p_B)^{n_C}}{n_C!}
$$

Analogously we can find the relative amount of barcodes that are present in no cell $R_0 = R(0) = e^{-N_C p_B}$, the relative amount of barcodes present in 1 cell $R_1 = R(1) = N_C p_B e^{-N_C p_B}$ and the relative amount of barcodes present in more than 1 cell $R_{>1} = \sum_{n_C > 1} 1 - (1 + N_C p_B)e^{-N_C p_B}$.

Multiple barcoding of the same cell is unproblematic for analysis of barcode frequency distributions. On the other hand, barcodes distributed to multiple cells leads to an effective merging of the size of derived clones and thus may alter the statistical properties of the barcode frequency distribution. Among labelled cells the relative amount of uniquely labelled cells (i.e., a combination of one or more barcodes) is given by

$$
    \mathbfcal{Q} = \frac{1}{1 - Q_0} \sum_{n_B =1}^{\infty} Q(n_B)[(1 - p_B)^{N_C -1}]^{n_B} 
$$

where, 
- $\mathbfcal{Q}$  = the fraction of cells that are uniquely labelled with at least 1 barcode.
- The summation runs over $n_B$ which represents the number of barcodes assigned to a cell.
- $Q(n_B)$ = the relative amount of cells labelled with $n_B$ barcodes.
- $(1-p_B)^{N_C-1}$ = the probability that a given cell does not acquire a specific barcode, given that there are $N_C -1$ other cells. This term is raised to the power $n_B$ indicating that this probability applies to each of the $n_B$ barcodes. This term accounts for the likelihood that if a cell has $n_B$ barcodes it has not acquifed any of the barcodes present in other cells. (the more barcodes a cell has the less likely it is that those barcodes are unique to that cell.)
- $\frac{1}{1-Q_0}$ = normalization the calculation to only consider labelled cells.

```{python}


```


# Asymmetric divsion model

This model can be described by the master equation:

$$
    \frac{\partial P}{\partial t} = \left(\omega (P(n-1,t) - 1) + 0.5 \lambda (n -1)P(n-1,t) + 0.5 \lambda (n+1)P(n+1,t) - \lambda n \right) P(n,t)
$$

In this model it is assumed only asymmetric division of GSCs can occur so they cannot increase in number.

Consider only a single passage

```{python}

@jit
def gillespie(t_start,t_stop,omega, lam, init_population, state_changes):
    '''
    A simple gillespie algrotithm

    Inputs:
        t_start = float, start time (usually always 0)
        t_stop = final time 
        omega = asymeetric division rate.
        lam = symmetric division / death rate of progenitor cells
        init_population = inital population size.
        state_changes = How the possible types of cell division effect the state of the model

    Outputs:
        s = list of number of stem cells at each time point
        p = list of number of progenitor cells at each time point
        t = list of time pionts
    '''

    #np.random.seed(42)

    nt = 100000
    # initialise a list to store the time 
    t = np.zeros(nt)

    # set initial condition
    s = np.zeros(nt)
    p = np.zeros(nt)
    s[0] = init_population[0]
    p[0] = init_population[1]

    i = 0
    while t[i] < t_stop and i < nt-1:

        #probability of each transition happening - (asymmetric division of GSC, symmetric division of progenitor or death of progenitor)
        prob = np.array([omega*s[i], 0.5*lam*p[i], 0.5*lam*p[i]])
        sum_prob = np.sum(prob)

        #choosing a time change from an exponential distribution 
        dt = np.random.exponential(1/sum_prob)
        t[i+1] = t[i] + dt 

        # uniform random number in [0,)
        rtot_rand = sum_prob*np.random.uniform(0, 1)
        # cumsum gives the cumulative sum, [rates(1) rates(1)+rates(2) ...]
        r = prob.cumsum()
        # reaction: first interval end point that rtot_rand is less than
        reaction = np.searchsorted(r,rtot_rand)


        # update the populations
        s[i+1] = s[i] + state_changes[reaction][0] # in asymetric division only model this should never change
        p[i+1] = p[i] + state_changes[reaction][1]

        i = i + 1

    #ignore empty entries
    t = t[0:i]
    s = s[0:i]
    p = p[0:i]

    return s,p,t


### Illustrative model simulation

# initialise parameters for simulation
t_stop = 500
t_start = 0
init_population=np.array([1,0]) #inital condition (start with a single GSC (s) cell)
#the effect each transition has on the states:
state_changes= np.array([
        [0,1], #The stem cell divides asymmetrically
        [0,1], #The progenitor cells divides symmetrically
        [0,-1], #The progenitor cell dies
    ])

num_sims = 4

omega = 0.15
lam = 1

plt.figure()

for i in range(num_sims):
    s,p,t =  gillespie(t_start,t_stop,omega, lam, init_population, state_changes)
    N = s+p
    plt.plot(t,N)


plt.ylabel('Clone Size')
plt.xlabel('Time')
plt.title('Model simulations')
plt.show()



```


```{python}

# Funtion to calcualate useful statistics of the distibutions of final sizes
def size_freq_stats(final_size):
    size_freq_order = pd.Series(final_size).value_counts(normalize=True)
    size_freq = pd.Series.sort_index(size_freq_order)
    size_freq_mean = np.sum(size_freq.index*np.transpose(size_freq.values))
    mu_n = (size_freq_mean - np.cumsum(size_freq.index*np.transpose(size_freq.values)))/size_freq_mean
    return size_freq,size_freq_mean,mu_n

```

## Emeragance of negative binomial distriubtion

I believe that the final colony size should follow a negative binomial disitibution

The master equation has an analytical solution, given by the negative binomial disitrubtion:

$$
    P(n,t) = \frac{1}{n!}\frac{\Gamma(\zeta+n)}{\Gamma(\zeta)}(\frac{n_0(t)}{(1 + n_0(t))})^n(1 - \frac{n_0(t)}{1+n_0(t)})^\zeta
$$

where $n_0(t) = \lambda t / 2$ (a dimensionless parameter) and $\zeta = 2 \omega / \lambda$ is the ratio immigartion rate and progenitor loss and replacement rate. And $\Gamma(x) = \int_0^\infty u^{x-1}e^{-u} $ is the Gamma function

For small immigration rates $\omega$, the barcode frequency distribution of cells with at least 1 progenitor cell, given by $P_*(n,t) = P(n,t) / (1 - P(0,t))$ has the form

$$
    P_*(n,t) \approx \frac{1}{N_0(t)} \frac{e^{-n/n_0(t)}}{n} + O(\omega)
$$

Where $N_0(t) = ln(n_0(t))$. This is a good aproximation for small immigration rates $\omega$

Do this for multiple stopping times and compare to analytical solution / negative binomial distriubtion!

```{python}

# set params for simulation
t_stop = 80
t_start = 0
omega = 0.15
lam = 1

# number of sims equivalent to number of starting cells infected with virus barcoding
num_sims = 10000
final_colony_size = np.zeros(num_sims)

plt.figure()

for i in range(0,num_sims):
    s,p,t =  gillespie(t_start,t_stop,omega, lam, init_population, state_changes)
    N = s+p
    final_colony_size[i] = N[-1]

    if i%100 == 0 :
        plt.plot(t,N)


plt.show()

plt.figure()
plt.hist(final_colony_size, density=True, bins=100)
plt.xlabel(f"colony size n")
plt.ylabel("Count / density")
plt.title(f"Disitribution of colony sizes at t = {t_stop}, number of samples = {num_sims}")


# analytical solution comparison
def analytical_sol(n,t, omega, lam):
    zeta = 2.0*omega/lam
    n0 = lam*t/2.0
    return ( 1.0 / special.factorial(n) ) * (special.gamma(zeta+n) / special.gamma(zeta)) * ( (n0 / (1 + n0) )**n ) *( ( 1 - (n0 / (1 + n0) ) )**zeta )

def neg_binomial(n,t,omega,lam):
    n0 = lam*t/2.0
    N0 = np.log(n0)
    return 1 / N0 * ( np.exp(-n/n0) / n)

n = np.linspace(0,200,101)
#plt.plot(n, analytical_sol(n,final_time,omega,lam))
#plt.plot(n,neg_binomial(n,final_time,omega,lam))
plt.semilogy(n,neg_binomial(n,t_stop,omega,lam), 'r--')
plt.semilogy(n,analytical_sol(n,t_stop,omega,lam), 'g--')

plt.legend(["Neg binomial approx sol", "Full solution", "Samples"])

plt.show()

```


```{python}

size_freq,size_freq_mean,mu_n=size_freq_stats(final_colony_size)

plt.semilogy(size_freq,'.',label='Initial model')
plt.semilogy(n,neg_binomial(n,t_stop,omega,lam))
plt.xlabel("Final colony size")
plt.ylabel("Density")
plt.title("Asymmetric division only model")

```


## Average bar code frequency

On average the barcoding frequencies grow linearly in time according to

$$
    <n(t)> = 1 + \omega t
$$

where $ <n(t)> = 1 + \sum_n nP(n,t)$ is the average barcode frequency with the first term accounting for the stem cell.


```{python}

# set params for simulation
t_stop = 80
t_start = 0
omega = 0.15
lam = 1

# number of sims equivalent to number of starting cells infected with virus barcoding
num_sims = 5000
final_colony_size = np.zeros(num_sims)

# Store time points and colony sizes for all simulations
all_time_points = []
all_colony_sizes = []

# Define a common time grid for interpolation
common_time_points = np.linspace(t_start, t_stop, num=100)  # 100 points between t_start and t_stop
interpolated_colony_sizes = np.zeros((num_sims, len(common_time_points)))

plt.figure()

for i in range(0,num_sims):
    s,p,t =  gillespie(t_start,t_stop,omega, lam, init_population, state_changes)
    N = s+p
    final_colony_size[i] = N[-1]

    # Store time points and colony sizes for interpolation
    all_time_points.append(t)
    all_colony_sizes.append(N)

    # Interpolate the colony sizes to the common time points
    if len(t) > 1:  # Ensure there are enough points to interpolate
        interp_func = interp1d(t, N, bounds_error=False, fill_value="extrapolate")
        #interpolated_colony_sizes[i, :] = interp_func(common_time_points)
        interpolated_values= interp_func(common_time_points)
        
        interpolated_colony_sizes[i, :] = np.maximum(interpolated_values, 0)
    
    if i%100 == 0 :
        plt.plot(t,N, color = 'grey', alpha = 0.3)



# analytical mean is given by
dt = 0.1
t = np.arange(0, t_stop,dt)
analytical_mean = 1 + omega*t

interp_mean = np.mean(interpolated_colony_sizes, axis=0)

plt.plot(common_time_points[0:-2], interp_mean[0:-2], label='Interpolated Mean', color='blue')

plt.plot(t, analytical_mean, 'r--')

# Add labels to the plot
plt.xlabel("Time")
plt.ylabel("Colony size (n)")
plt.title("Comparison of analytical and calualted mean")

```